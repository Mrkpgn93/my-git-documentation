git status

git init

git add <file-name> <file-name2>...

git add .

git commit -m "my message"

git log

git log --oneline

git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all

git commit --amend          // Posso tornare indietro soltanto di un passo! viene comodo quando devo modificare il messaggio del commit oppure aggiungere qualcosa che mi ero dimenticato all'interno dello stage (in quest'ultimo caso devo precedere il comando di amend da quello di add)

git branch                      // vedo l'elenco dei branch anteponendo il simbolo * su quello in cui mi trovo

git branch <branch-name>        // crea un nuovo branch con il branch-name indicato a partire dall'HEAD corrente

Quando decido di fare switch da un branch all'altro devo sempre vedere se ho lasciato qualcosa all'interno dello stage, mi potrei trovare in 2 casi:
1- tutto quello che ho nello stage non va in conflitto con il branch sul quale voglio switchare, se non committo prima di switchare allora mi trascino con me tutto lo stage
2- parte dello stage va in conflitto con il branch sul quale voglio switchare, in questo caso git mi blocca e mi da solo due alternative:
    2.1- committare tutto quello che c'è nello stage e SOLO DOPO switchare
    2.2- stashare il materiale così da poter switchare liberamente 

git switch <branch-name>        // sposto il puntatore HEAD in corrispondenza dell'ultimo commit del <branch-name>

git commit -a -m <message>		// "git add ." + "git commit" 

git switch -c <branch-name>		// "git branch <branch-name>" + "git switch <branch-name>"

Quando voglio cancellare un branch devo sempre farlo stando su un'altro branch!!!

git branch -d <branch-name>		// cancella un branch (da utilizzare subito dopo un git merge <branch-name>)

git branch -D <branch-name>		// forza la cancellazione di un branch che è rimasto "appeso" xk non è stato mergiato (pericoloso...)

git branch -m <branch-name>     // rinomina il branch corrente con branch-name	

Esitono 3 tipi di merge:
1- Fast Forward Merge -> avviene quando eseguo commit su uno dei due branch senza toccare l'altro
2- Merge Commit -> avviene quando i due branch sono entrambi committati ma la loro unione non determina conflitti (git esegue il commit del merge per noi)
3- Merge Conflicts -> avviene quando i due branch sono entrambi committati e la loro unione determina conflitti (xk ad es. modificano le stesse righe), in questo caso dobbiamo manualmente risolvere il conflitto (tramite editor) e successivamente committare il merge

Molto spesso quando si ha la certezza che un merge genererà conflitti per non compromettere uno dei due branch (sul quale dovrei fare il merge) si preferisce creare prima un nuovo branch di prova
con l'HEAD su uno dei due branch e SOLO dopo su quest'ultimo fare il merge, se tutto va a buon fine solo allora si confluisce su uno dei branch di partenza

git merge <branch-name>         // restituisce un branch unione (intersezione in caso di conflitti) con il branch-name indicato, da notare che il branch-name rimmarrà invariato

git diff        // mostra a video tutti i cambiamenti della cartella di lavoro che non sono stati ancora inseriti nell'area di stage, eseguito il "git add ." non ottengo nessun risultato

git diff head [filename]  // mostra a video tutti i cambiamenti del file system dall'ultimo commit (sia che siano nello stage oppure no), nel caso non ho modificato il progetto (quindi HEAD punta ancora all'ultimo commit) non ottengo nessun risultato

git diff --staged [filename]  <--> git diff --cached [filename]      // mostra a video solo e soltanto i cambiamenti che sono stati messi nell'area di stage

git diff <from-branch-name>..<to-branch-name>

git diff <from-commit>..<to-commit>

git stash       // salva tutto quello che non è stato ancora committato in una apposita area di memoria

git stash pop   // carica il materiale stashato per ultimo nella woking directory indicata dall'attuale posizione del mio HEAD

git stash apply		// è come pop con la differenza che non viene rilasciata la memoria di stash

Se eseguo "git stash" più volte tutto il materiale viene caricato seguendo l'approccio LIFO, ad ogni aggiunta viene incrementato l'id di tutti gli altri stash più vecchi

git stash list  // mostra l'elenco di stash secondo la struttura LIFO

git stash apply stash@{<id-number>}     // sto eseguendo applay indicando un preciso stash all'interno dello stack

git stash drop stash@{<id-number>}      // sto cancellando un preciso stash all'interno dello stack

git stash clear         // sto cancellando tutto lo stash

Solo checkout è in grado di portare tutto il progetto indietro nel tempo con la modalità detached, il comando restore invece lavora solo per singoli file

git checkout <hash-commit>		// l'intero progetto torna indietro al tempo indicato dall'hash-commit

git checkout HEAD~1				// l'intero progetto torna indietro di 1 passo rispetto alla posizione attuale di HEAD
git checkout HEAD~2				// l'intero progetto torna indietro di 2 passo rispetto alla posizione attuale di HEAD
git checkout HEAD~3				// l'intero progetto torna indietro di 3 passo rispetto alla posizione attuale di HEAD

git switch - 					// da detach mode l'HEAD torna all'ultimo commit del branch in cui mi trovo

git switch <branch-name> 		// da detach mode l'HEAD torna all'ultimo commit del branch-name

git restore <file-name> [<file-name>] <--> git checkout HEAD <file-name> [<file-name>]  // tutte le modifiche unstaged del file-name verranno eliminate 

git restore --staged <file-name> [<file-name>]	<--> git reset HEAD -- <file-name>  <--> git reset <file-name>   // tutte le modifiche del file-name da staged diventano unstaged

git restore --source HEAD~1 <file-name> [<file-name>] <--> git checkout HEAD~1 <file-name> [<file-name>]                 // porto il file-name 1 passo indietro rispetto la posizione attuale dell'HEAD SENZA TROVARMI IN DETACHED MODE!!!

git restore --source <hash-commit> <file-name> [<file-name>] <--> git checkout <hash-commit> <file-name> [<file-name>]   // porto il file-name alla posizione indicata dall'hash-commit SENZA TROVARMI IN DETACHED MODE!!!

cat .git/HEAD		// mi restituisce il commit dove punta l'HEAD

reset è un comando che cancella i commit NON i branch!!

git reset <hash-commit>			// torno al commit indicato e tutto quello che era stato committato dopo l'hash-commit indicato me lo trovo in fase di unstaged

git reset --hard <hash-commit>  // torno al commit indicato e tutto quello che era stato committato dopo l'hash-commit indicato VIENE CANCELLATO!!

git revert <hash-commit> 		// agginge un commit che fa l'undo dei precedenti, è il modo più intelligente per fare una specie di reset ma senza la cancellazione dei commit

git clone <url>         // permette di caricare in locale un repo remoto indicato dal suo url (è importante assicuransi di NON essere già dentro un'altro repo quando si esegue questo comando)

git remote -v           // verifica l'esistenza di una connessione con un repo remoto (caricato su github)

git remote add <name> <url>		// aggancio un repository locale con uno creato ex-novo su GitHub, di solito name = origin (NON HO ANCORA PUSHATO IL REPO...)

git remote rename <old> <new>

git remote remove <name>

git push <remote> <branch>		// crea su github un branch con lo stesso nome che gli abbiamo dato in locale, le volte successive aggiornerà lo stato del repository su github

git push -u <remote> <branch>	// dopo la prima volta che lo eseguiamo possiamo semplificare il comando da eseguire scrivendo soltanto "git push"

git push <remote> <local-branch>:<remote-branch>		// carica su github tutte le modifiche che sono state fatte nel branch locale su un remote branch che ha un nome diverso da quello locale...

git branch -r

git checkout <remote>/<branch>		// torno all'ultimo commit che riguarda il progetto clonato da gitHub 

git push origin main			// carico gli ultimi commit locali su gitHub

git switch <nomeBranch>				// mi permette di clonare sul mio host il branch remoto di gitHub (che ha lo stesso nome)

git fetch <remote>				// il comando fetch mi permette di aggiornare l'origin SENZA andare a modificare il mio workspace

git fetch <remote> <branch>		// seleziono soltanto un branch di mio interesse

git pull <remote> <branch>		// posso anche scrivere soltanto "git pull", "git pull" = "git fetch" + "git merge"